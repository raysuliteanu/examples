buildscript {
    ext {
        springBootVersion = '2.1.6.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

plugins {
    id 'com.bmuschko.docker-remote-api' version '7.3.0'
}

ext {
    jupiterVersion = '5.4.2'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.bmuschko.docker-spring-boot-application'

    group = 'com.example'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = 11

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        implementation "org.springframework.boot:spring-boot-starter-logging"
        implementation "org.springframework.boot:spring-boot-starter-actuator"
        implementation "org.springframework.boot:spring-boot-starter-data-rest"
        implementation "org.springframework.boot:spring-boot-starter-hateoas"
        implementation "org.springframework.boot:spring-boot-starter-security"
        implementation "org.springframework.boot:spring-boot-starter-web"
        implementation "org.springframework.boot:spring-boot-starter-webflux"
        implementation "org.springframework.data:spring-data-rest-hal-browser"
        implementation "org.springframework.boot:spring-boot-starter-oauth2-client"
        implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"

        compileOnly "org.springframework.boot:spring-boot-configuration-processor"

        runtimeOnly "org.springframework.boot:spring-boot-devtools"

        compileOnly "org.projectlombok:lombok:1.18.6"
        annotationProcessor 'org.projectlombok:lombok:1.18.6'

        testImplementation "org.springframework.boot:spring-boot-starter-test"
        testImplementation "org.springframework.security:spring-security-test"
        testImplementation "org.junit.jupiter:junit-jupiter-api:${jupiterVersion}"

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${jupiterVersion}"
    }

    // cleanup random things that might get generated; 'out' is from IntelliJ; the DMP stuff might result if running tests
    clean {
        delete "${projectDir}/out"
        delete "${projectDir}/.clover"
    }

    test {
        useJUnitPlatform()
        reports {
            html {
                enabled = false
            }
        }

        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    springBoot {
        buildInfo()
    }

    docker {
        springBootApplication {
            baseImage = 'openjdk:11-jre'
            ports = [8080, 8443]
        }
        registryCredentials {
            username = getConfigurationProperty 'DOCKER_USERNAME', 'docker.username'
            password = getConfigurationProperty 'DOCKER_PASSWORD', 'docker.password'
            email = getConfigurationProperty 'DOCKER_EMAIL', 'docker.email'
        }
    }
}

String getConfigurationProperty(String envVar, String sysProp) {
    System.getenv(envVar) ?: project.findProperty(sysProp)
}
